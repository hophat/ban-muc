import 'package:flutter/foundation.dart';
import '../models/user.dart';
import '../services/api_service.dart';

class AuthProvider with ChangeNotifier {
  final ApiService _apiService;
  User? _user;
  bool _isLoading = false;
  String? _error;
  bool _isAuthenticated = false;

  AuthProvider(this._apiService);

  User? get user => _user;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isAuthenticated => _isAuthenticated;

  // Demo accounts
  final Map<String, String> _demoAccounts = {
    '0123456789': '123456', // Admin account
    '0987654321': '654321', // Staff account
  };

  Future<bool> login(String phone, String pin) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      // Kiểm tra tài khoản demo trước
      if (_demoAccounts.containsKey(phone)) {
        if (_demoAccounts[phone] == pin) {
          _user = User(
            id: 1,
            name: phone == '0123456789' ? 'Admin Demo' : 'Staff Demo',
            email: '${phone}@demo.com',
            phone: phone,
            role: phone == '0123456789' ? 'admin' : 'staff',
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          );
          _isAuthenticated = true;
          _isLoading = false;
          notifyListeners();
          return true;
        } else {
          throw 'Mã PIN không đúng';
        }
      }

      // Nếu không phải tài khoản demo, gọi API
      final response = await _apiService.login(phone, pin);
      if (response['token'] != null) {
        _user = User(
          id: response['user']['id'],
          name: response['user']['name'],
          email: response['user']['email'],
          phone: response['user']['phone'],
          role: response['user']['role'],
          createdAt: DateTime.parse(response['user']['created_at']),
          updatedAt: DateTime.parse(response['user']['updated_at']),
        );
        _isAuthenticated = true;
        _isLoading = false;
        notifyListeners();
        return true;
      }
      throw 'Đăng nhập thất bại';
    } catch (e) {
      _error = e.toString();
      _isAuthenticated = false;
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  Future<bool> register({
    required String name,
    required String email,
    required String password,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      final response = await _apiService.register(name, email, password);
      if (response['token'] != null) {
        _user = User(
          id: response['user']['id'],
          name: response['user']['name'],
          email: response['user']['email'],
          phone: response['user']['phone'],
          role: response['user']['role'],
          createdAt: DateTime.parse(response['user']['created_at']),
          updatedAt: DateTime.parse(response['user']['updated_at']),
        );
        _isAuthenticated = true;
        _isLoading = false;
        notifyListeners();
        return true;
      }
      throw 'Đăng ký thất bại';
    } catch (e) {
      _error = e.toString();
      _isAuthenticated = false;
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  Future<bool> registerWithPhone({
    required String phoneNumber,
    required String pin,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      final response = await _apiService.registerWithPhone(phoneNumber, pin);
      if (response['token'] != null) {
        _user = User(
          id: response['user']['id'],
          name: response['user']['name'],
          email: response['user']['email'],
          phone: response['user']['phone'],
          role: response['user']['role'],
          createdAt: DateTime.parse(response['user']['created_at']),
          updatedAt: DateTime.parse(response['user']['updated_at']),
        );
        _isAuthenticated = true;
        _isLoading = false;
        notifyListeners();
        return true;
      }
      throw 'Đăng ký thất bại';
    } catch (e) {
      _error = e.toString();
      _isAuthenticated = false;
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  Future<void> logout() async {
    _user = null;
    _isAuthenticated = false;
    _error = null;
    await _apiService.logout();
    notifyListeners();
  }

  Future<bool> checkAuthStatus() async {
    try {
      final response = await _apiService.getCurrentUser();
      if (response != null) {
        _user = User(
          id: response['id'],
          name: response['name'],
          email: response['email'],
          phone: response['phone'],
          role: response['role'],
          createdAt: DateTime.parse(response['created_at']),
          updatedAt: DateTime.parse(response['updated_at']),
        );
        _isAuthenticated = true;
        notifyListeners();
        return true;
      }
      _isAuthenticated = false;
      notifyListeners();
      return false;
    } catch (e) {
      _isAuthenticated = false;
      notifyListeners();
      return false;
    }
  }
} 